// Mocks generated by Mockito 5.2.0 from annotations
// in cep_infra/test/src/cep_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:cep_infra/src/datasources/cep_hive_datasource.dart' as _i5;
import 'package:cep_infra/src/datasources/cep_http_datasource.dart' as _i3;
import 'package:cep_models/cep_models.dart' as _i2;
import 'package:connectivity_plus/connectivity_plus.dart' as _i6;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCepModel_0 extends _i1.Fake implements _i2.CepModel {}

/// A class which mocks [CepHttpDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCepHttpDataSource extends _i1.Mock implements _i3.CepHttpDataSource {
  MockCepHttpDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.CepModel> getCep(String? cep) =>
      (super.noSuchMethod(Invocation.method(#getCep, [cep]),
              returnValue: Future<_i2.CepModel>.value(_FakeCepModel_0()))
          as _i4.Future<_i2.CepModel>);
}

/// A class which mocks [CepHiveDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCepHiveDataSource extends _i1.Mock implements _i5.CepHiveDataSource {
  MockCepHiveDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.CepModel> getCep(String? cep) =>
      (super.noSuchMethod(Invocation.method(#getCep, [cep]),
              returnValue: Future<_i2.CepModel>.value(_FakeCepModel_0()))
          as _i4.Future<_i2.CepModel>);
  @override
  _i4.Future<void> saveCep(String? cep, _i2.CepModel? cepModel) =>
      (super.noSuchMethod(Invocation.method(#saveCep, [cep, cepModel]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i6.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i7.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(Invocation.getter(#onConnectivityChanged),
              returnValue: Stream<_i7.ConnectivityResult>.empty())
          as _i4.Stream<_i7.ConnectivityResult>);
  @override
  _i4.Future<_i7.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(Invocation.method(#checkConnectivity, []),
              returnValue: Future<_i7.ConnectivityResult>.value(
                  _i7.ConnectivityResult.bluetooth))
          as _i4.Future<_i7.ConnectivityResult>);
}
